package com.semenog.game.tetris;

import java.util.Random;

import android.view.SurfaceHolder;

public class Stage{

	static final long FPS = 10;
	static boolean flag = true;
	private boolean running = false;
	
	private ISurface panel;
	private long timer;
	private int [][] sfield ;
	
	public Stage(){}
	
	public Stage(SurfaceHolder surfHolder, ISurface panel){
		
		this.panel = panel;		
		
	}
	
	public void stageSetting(int stageNum){
		
		Random rnd = new Random();
		
		switch(stageNum){
		case 1:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 500;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 2;
			sfield = new int[][]{
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},								
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},								
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
			};					
			
//			for (int row = 10; row < GameView.field.length-5; row++) {
//				for (int column = 3; column < GameView.field[0].length-3; column++) {								
//			
//					GameView.field[row][column] = sfield[row][column];
//					
//						try {
//							Thread.sleep(20);
//						} catch (InterruptedException e) {
//							e.printStackTrace();
//						}							
//									
//				}							
//		}
			
			break;
		
		case 2:
						DownLoopThread.sleepTime = 800;	
						GameLoopThread.gameTime = 200;
						GameView.lineCount = 10;		
						WaveStageThread.FPS = 300;			
						WaveStageThread.channel = 1;			
						WaveStageThread.wavechange = 2;
						for (int row = 0; row <=20 ; row++) {
							for (int column = 0; column < GameView.field[0].length; column++) {
								
								if ((row >=15  ) && (column >3 && column <13 && column%2 ==1)) {
									GameView.field [row][column] = rnd.nextInt(7)+1;
									try {
										Thread.sleep(20);
									} catch (InterruptedException e) {
										e.printStackTrace();
									}
									}
											
							}							
					}	
			break;
			
		case 3:
			DownLoopThread.sleepTime = 800;		
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;			
			WaveStageThread.FPS = 500;		
			WaveStageThread.channel = 1;	
			WaveStageThread.wavechange = 3;
						
			sfield = new int[][]{
					
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},								
					{0,0,0,5,5,0,0,0,5,5,0,0,0,0,0,0},
					{0,0,0,0,5,5,0,0,0,5,5,0,0,0,0,0},
					{0,0,0,0,5,5,5,0,0,5,5,5,0,0,0,0},
					{0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0},
					{0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					
			};						
			
			for (int row = 16; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}	
			break;	
		case 4:
			DownLoopThread.sleepTime = 800;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 5;		
			WaveStageThread.FPS = 500;			
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 4;
			
			sfield = new int[][]{
					
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},								
					{0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					
			};						
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}

						break;
		case 5:
						DownLoopThread.sleepTime = 400;		
						GameLoopThread.gameTime = 200;
						GameView.lineCount = 10;	
						WaveStageThread.FPS = 300;			
						WaveStageThread.channel = 1;			
						WaveStageThread.wavechange = 5;
						sfield = new int[][]{
								
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,4,0,4,0,0,0,0},
								{0,0,0,0,0,0,0,0,4,4,4,4,4,0,0,0},
								{0,0,0,0,0,0,0,0,0,4,4,4,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0},
								{0,0,0,0,0,4,0,4,0,0,0,0,0,0,0,0},								
								{0,0,0,0,4,4,4,4,4,0,0,0,0,0,0,0},
								{0,0,0,0,0,4,4,4,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0},								
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								
						};					
						
						for (int row = 10; row < GameView.field.length-5; row++) {
							for (int column = 3; column < GameView.field[0].length-3; column++) {								
						
								GameView.field[row][column] = sfield[row][column];
								
									try {
										Thread.sleep(20);
									} catch (InterruptedException e) {
										e.printStackTrace();
									}							
												
							}							
					}
						break;
		case 6:
						DownLoopThread.sleepTime = 400;	
						GameLoopThread.gameTime = 200;
						GameView.lineCount = 10;	
						WaveStageThread.FPS = 300;
						WaveStageThread.channel = 1;			
						WaveStageThread.wavechange = 3;
						sfield = new int[][]{
								
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0},
								{0,0,0,0,4,4,0,0,4,4,0,4,0,0,0,0},								
								{0,0,0,0,4,4,0,0,4,4,0,4,4,0,0,0},
								{0,0,0,4,4,0,0,4,4,4,4,4,4,0,0,0},
								{0,0,0,0,4,4,4,4,4,0,4,4,4,0,0,0},								
								{0,0,0,4,4,4,4,4,4,4,4,4,4,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
								
						};					
						
						for (int row = 10; row < GameView.field.length-5; row++) {
							for (int column = 3; column < GameView.field[0].length-3; column++) {								
						
								GameView.field[row][column] = sfield[row][column];
								
									try {
										Thread.sleep(20);
									} catch (InterruptedException e) {
										e.printStackTrace();
									}							
												
							}							
					}
						break;
		case 7:

			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 300;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 3;
			sfield = new int[][]{
					
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,2,1,2,1,2,1,2,1,0,0,0,0},
					{0,0,0,0,0,2,1,2,1,2,1,0,0,0,0,0},
					{0,0,0,0,0,0,2,1,2,1,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0},								
					{0,0,0,0,0,0,1,2,1,2,0,0,0,0,0,0},
					{0,0,0,0,0,1,2,1,2,1,2,0,0,0,0,0},
					{0,0,0,0,1,2,1,2,1,2,1,2,0,0,0,0},								
					{0,0,0,1,2,1,2,1,2,1,2,1,2,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;			
		case 8:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 300;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 3;
			sfield = new int[][]{
					
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,5,0,5,0,0,0,0,0,0},
					{0,0,0,0,0,0,5,0,5,0,5,0,0,0,0,0},
					{0,0,0,0,0,5,0,5,0,5,0,5,0,0,0,0},
					{0,0,0,0,5,0,5,0,5,0,5,0,5,0,0,0},								
					{0,0,0,5,0,5,0,5,0,5,0,5,0,0,0,0},
					{0,0,0,0,5,0,5,0,5,0,5,0,5,0,0,0},
					{0,0,0,5,0,5,0,5,0,5,0,5,0,0,0,0},								
					{0,0,0,0,5,0,5,0,5,0,5,0,5,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;			
		case 9:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;					
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 1;
			sfield = new int[][]{
					
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0},
					{0,0,0,7,0,0,0,0,0,0,0,7,7,0,0,0},
					{0,0,0,7,0,0,0,0,7,0,0,7,7,0,0,0},								
					{0,0,0,7,0,0,7,0,7,7,0,7,7,0,0,0},
					{0,0,0,7,7,0,7,7,7,7,0,7,7,0,0,0},
					{0,0,0,7,7,0,7,7,7,7,0,7,7,0,0,0},								
					{0,0,0,7,7,7,7,7,7,7,7,7,7,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;		
			
		case 10:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 200;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 5;
			sfield = new int[][]{
					
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,3,3,0,0,1,1,0,0,0,0,0},								
					{0,0,0,0,0,3,3,0,0,1,1,0,0,0,0,0},
					{0,0,0,5,5,0,0,2,2,0,0,6,6,0,0,0},
					{0,0,0,5,5,0,0,2,2,0,0,6,6,0,0,0},								
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;
		case 11:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 200;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 1;
			sfield = new int[][]{
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,5,0,0,5,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,5,0,0,5,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,5,0,0,5,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,5,0,0,5,0,0,0,	0,0,0},
					{0,0,0,		0,0,5,0,0,0,0,5,0,0,	0,0,0},
					{0,0,0,		0,0,5,1,1,1,1,5,0,0,	0,0,0},								
					{0,0,0,		0,0,5,1,1,1,1,5,0,0,	0,0,0},
					{0,0,0,		0,0,5,1,1,1,1,5,0,0,	0,0,0},
					{0,0,0,		0,0,5,1,1,1,1,5,0,0,	0,0,0},								
					{0,0,0,		0,0,5,5,5,5,5,5,0,0,	0,0,0},
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;
		case 12:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 200;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 1;
			sfield = new int[][]{
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,4,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,4,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,4,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,4,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,6,6,6,6,0,0,0,	0,0,0},								
					{0,0,0,		0,0,0,5,5,5,5,0,0,0,	0,0,0},
					{0,0,0,		0,0,2,2,2,2,2,2,0,0,	0,0,0},
					{0,0,0,		0,0,3,3,3,3,3,3,0,0,	0,0,0},								
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;
		case 13:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 200;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 1;
			sfield = new int[][]{
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,2,0,2,0,2,0,2,0,2,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,3,0,3,0,3,0,3,0,3,	0,0,0},								
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		4,0,4,0,4,0,4,0,4,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},								
					{0,0,0,		1,0,1,0,1,0,1,0,1,0,	0,0,0},
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;
		case 14:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 200;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 1;
			sfield = new int[][]{
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,2,2,0,0,2,2,2,2,	0,0,0},
					{0,0,0,		0,0,2,2,2,0,0,2,2,0,	0,0,0},
					{0,0,0,		0,0,0,2,2,2,2,2,2,0,	0,0,0},
					{0,0,0,		0,0,0,0,2,2,2,2,0,0,	0,0,0},								
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,3,3,3,0,0,3,3,3,0,	0,0,0},								
					{0,0,0,		0,0,3,0,0,0,0,3,0,0,	0,0,0},
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;
		case 15:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 200;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 2;
			sfield = new int[][]{
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,5,5,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,5,5,5,5,5,0,0,0,0,	0,0,0},
					{0,0,0,		0,5,5,5,5,5,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,5,5,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},								
					{0,0,0,		0,0,0,0,5,5,5,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,5,5,5,5,5,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,5,5,5,0,0,0,	0,0,0},								
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;
		case 16:
			
			DownLoopThread.sleepTime = 400;	
			GameLoopThread.gameTime = 200;
			GameView.lineCount = 10;	
			WaveStageThread.FPS = 200;
			WaveStageThread.channel = 1;			
			WaveStageThread.wavechange = 2;
			sfield = new int[][]{
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,4,6,4,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,4,4,4,4,4,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,4,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,3,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,3,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,3,0,3,0,0,0,2,0,	0,0,0},								
					{0,0,0,		0,0,0,3,3,0,0,2,2,2,	0,0,0},
					{0,0,0,		0,0,0,0,3,0,0,0,3,0,	0,0,0},
					{0,0,0,		0,0,0,0,3,0,0,0,3,0,	0,0,0},								
					{0,0,0,		0,0,0,0,3,3,0,0,3,0,	0,0,0},
					
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					{0,0,0,		0,0,0,0,0,0,0,0,0,0,	0,0,0},
					
			};					
			
			for (int row = 10; row < GameView.field.length-5; row++) {
				for (int column = 3; column < GameView.field[0].length-3; column++) {								
			
					GameView.field[row][column] = sfield[row][column];
					
						try {
							Thread.sleep(20);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}							
									
				}							
		}
			
			break;
		}
		
	}
	
	public void stageClear(int stage){
		
		
		
		
	}
	
}
